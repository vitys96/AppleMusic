//
//  SearchPresenter.swift
//  AppleMusic
//
//  Created Vitaly on 24.11.2019.
//  Copyright © 2019 Vitaly. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/Swift-viper-template-for-xcode
//

import UIKit

class SearchPresenter {
    // MARK: - Properties
    weak private var view: SearchView?
    var interactor: SearchInteractorInput?
    private let router: SearchWireframeInterface
    private var offSet: Int = 0

    // MARK: - Initialization and deinitialization -
    init(interface: SearchView, interactor: SearchInteractorInput?, router: SearchWireframeInterface) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

}

// MARK: - SearchPresenterInterface -
extension SearchPresenter: SearchPresenterInterface {
    func saveTrackInDB(track: SearchCell.ViewModel) {
        self.interactor?.saveTrackIntoDatabase(song: track)
    }
    
    func fetchData(searchText: String) {
        self.view?.startLoading()
        self.interactor?.fetchSearchingData(searchText: searchText)
    }
}

// MARK: - SearchInteractorOutput -
extension SearchPresenter: SearchInteractorOutput {
    func fetchedSearchList(error: Error) {
        self.view?.stopLoading()
        view?.displayEmptyView(animationName: "NoConnection", title: "Проблемы с сетью", message: "Отсутствие или не стабильное подключение к сети")
    }
    
    func fetchedFully() {
        self.view?.stopLoading()
    }
    
    func fetchedSearchList(lists: [Songs]) {
        self.view?.stopLoading()
        guard lists.count > 0 else {
            view?.displayEmptyView(animationName: "empty", title: "Ничего не найдено", message: "Пожалуйста, попробуйте снова")
            return
        }
        
        let rows = lists.map { song in
            SearchCell.ViewModel(trackName: song.trackName,
                                 artistName: song.artistName,
                                 collectionName: song.collectionName,
                                 songIconUrl: song.songIconUrl100,
                                 songMp4: song.songmp4,
                                 trackImage: nil)
        }
        self.view?.displayFetchedSongs(songs: rows)
    }
}

