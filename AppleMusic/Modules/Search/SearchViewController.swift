//
//  SearchViewController.swift
//  AppleMusic
//
//  Created Vitaly on 24.11.2019.
//  Copyright Â© 2019 Vitaly. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/Swift-viper-template-for-xcode
//

import UIKit
import TableKit
import Lottie
import Motion
import SPAlert

class SearchViewController: UIViewController {
    // MARK: - Properties
    var presenter: SearchPresenterInterface?
    private var tableDirector: TableDirector!
    private let searchController = UISearchController(searchResultsController: nil)
    private var timer: Timer?
    private let emptyView = LottieView()
    private var songsViewModel: [SearchCell.ViewModel]?
    weak var tabBarDelegate: MainTabBarControllerDelegate?
    private var serachingText: String?
    private var isFetching: Bool = false
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            tableDirector = TableDirector(tableView: tableView, scrollDelegate: self, shouldUseAutomaticCellRegistration: true, cellHeightCalculator: nil)
        }
    }
    override func viewWillAppear(_ animated: Bool) {
           super.viewWillAppear(animated)
           
           let keyWindow = UIApplication.shared.connectedScenes
           .filter({$0.activationState == .foregroundActive})
           .map({$0 as? UIWindowScene})
           .compactMap({$0})
           .first?.windows
           .filter({$0.isKeyWindow}).first
           
           let tabBarVC = keyWindow?.rootViewController as? MainTabBarController
           tabBarVC?.trackDetailView.delegate = self
       }
    
    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        presenter?.viewDidLoad()
        searchBar(searchController.searchBar, textDidChange: "Billie")
    }
}

// MARK: - SearchView
extension SearchViewController: SearchView {
    func displayEmptyView(animationName: String, title: String, message: String) {
        emptyView.update(title: title, subTitle: message, lottieName: animationName, animationViewContentMode: .scaleAspectFill)
        emptyView.animate(.fade(1))
        tableView.animate(.fade(0))
        emptyView.isHidden = false
    }
    
    func displayFetchedSongs(songs: [SearchCell.ViewModel]) {
        emptyView.animate(.fade(0))
        tableView.animate(.fade(1))
        emptyView.isHidden = true
        self.songsViewModel = songs
        let section = TableSection()
        
        let configureAction = TableRowAction<SearchCell>.init(.configure) { cellOption in
            guard let cell = cellOption.cell else { return }
            cell.backgroundColor = .cellBackground
            cell.selectionStyle = .none
        }
        let rowSelectionAction = TableRowAction<SearchCell>.init(.select) { [weak self] cellOption in
            guard let self = self,
                let cell = cellOption.cell,
                let cellViewModel = cell.songViewModel
                else { return }
            self.tabBarDelegate?.maximizeTrackDetailController(viewModel: cellViewModel)
            self.tableView.selectRow(at: cellOption.indexPath, animated: true, scrollPosition: .none)
            self.tableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 64, right: 0)
            
        }
        let addToLibraryAction = TableRowAction<SearchCell>(CellActions.addToLibrary.rawValue) { (cellOption) in
            guard let cell = cellOption.cell, let cellViewModel = cell.songViewModel else { return }
            self.presenter?.saveTrackInDB(track: cellViewModel)
        }
        let rows: [TableRow<SearchCell>] = songs.enumerated().map {
            TableRow<SearchCell>(item: $0.element, actions: [configureAction, rowSelectionAction, addToLibraryAction])
        }
        section.append(rows: rows)
        tableDirector.append(section: section)
        tableDirector.reload()
    }
}

// MARK: - UI Configuration
extension SearchViewController {
    private func configureUI() {
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        searchController.obscuresBackgroundDuringPresentation = false
        definesPresentationContext = true
        searchController.searchBar.delegate = self
        view.backgroundColor = .background
        configureTableView()
        configureEmptyView()
    }
    private func configureTableView() {
        tableView.backgroundColor = .background
        tableView.separatorColor = .separatorColor
        tableView.tableFooterView = UIView()
        tableView.keyboardDismissMode = .onDrag
    }
    private func configureEmptyView() {
        view.insertSubview(self.emptyView, belowSubview: self.tableView)
        emptyView.fillSuperview()
        emptyView.isHidden = true
    }
}

extension SearchViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { (_) in
            if !searchText.isEmpty {
                self.serachingText = searchText
                self.presenter?.fetchData(searchText: searchText)
            }
        })
    }
}

extension SearchViewController: UIScrollViewDelegate {
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        if offsetY > contentHeight / 1.1 - scrollView.frame.height {
            if !isFetching {
                guard let searchText = serachingText else { return }
                fetchingMore(text: searchText)
            }
        }
    }
    private func fetchingMore(text: String) {
        isFetching = true
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.01) {
            self.presenter?.fetchData(searchText: text)
            self.isFetching = false
        }
    }
}

extension SearchViewController: TrackMovingDelegate {
    private func getTrack(isForwardTrack: Bool) -> SearchCell.ViewModel? {
        guard let indexPath = tableView.indexPathForSelectedRow else { return nil }
        tableView.deselectRow(at: indexPath, animated: true)
        var nextIndexPath: IndexPath!
        if isForwardTrack {
            nextIndexPath = IndexPath(row: indexPath.row + 1, section: indexPath.section)
            if nextIndexPath.row == songsViewModel?.count {
                nextIndexPath.row = 0
            }
        } else {
            nextIndexPath = IndexPath(row: indexPath.row - 1, section: indexPath.section)
            if nextIndexPath.row == -1 {
                nextIndexPath.row = (songsViewModel?.count ?? 0) - 1
            }
        }
        tableView.selectRow(at: nextIndexPath, animated: true, scrollPosition: .middle)
        let song = songsViewModel?[nextIndexPath.row]
        return song
    }
    
    func moveBackForPreviousTrack() -> SearchCell.ViewModel? {
        return getTrack(isForwardTrack: false)
    }
    
    func moveForwardForNextTrack() -> SearchCell.ViewModel? {
        return getTrack(isForwardTrack: true)
    }
}
